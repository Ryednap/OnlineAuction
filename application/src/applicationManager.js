'use strict';

// imports
const logger = require('../utils/logger');
const ProgressBar = require("../utils/progressBar");
const {terminal: term} = require('terminal-kit');
const assert = require("assert");

/**
 * A single Unit Object with arguments and it's current State in
 * ApplicationStack is generated by this constructor function.
 * The Object is any class and that class must have start `start()`.
 *
 * @param object {object} object to be stored
 * @param args {[]} list of arguments used to run the object
 * @param state: {string} current state of execution
 * @param delay: {number} delay used to load the object
 * @constructor
 */

function UnitModule(object, args, state, delay) {
    this.object = object;
    this.args = args;
    this.state = state;
    this.delay = delay;
}

/**
 * changeState of the module
 * @param state {string}
 */
UnitModule.prototype.changeState = function (state) {
    this.state = state;
}

/**
 * Override default toString for object used for logging.
 * @returns {`object: ${string} args: ${string} state: ${string}`}
 */
UnitModule.prototype.toString = function () {
    return `object: ${this.object} args: ${this.args} state: ${this.state}`
};



/**
 * ApplicationManager
 * @class
 * @classdesc Manages Application Route by building a stack and running the Module on top of stack
 */

class ApplicationManager{
    static #runStack = [];
    /**
     * @function : runApp
     * @access private
     * Runs the UnitModule that is top of the runStack by calling the
     * UnitModule object `start()` returns the returned result after running.
     */
    static #runApp () {
        let element = ApplicationManager.#runStack[ApplicationManager.#runStack.length - 1];
        if (element.state === 'Paused') {
            ApplicationManager.#runStack[ApplicationManager.#runStack.length - 1]
                .changeState('Running');
            element.object = new element.object.constructor();
            element.object.start(...element.args);

        } else if (element.state === 'Pending') {
            ApplicationManager.#runStack[ApplicationManager.#runStack.length - 1]
                .changeState('Running');

            const progressBar = new ProgressBar(element.object, element.args, element.delay);
            progressBar.run({
                width: 100,
                title: '\n\n\t\tLOADING\t\t',
                eta: true,
                percent: true,
                titleStyle: term.bold.brightRed,
                barStyle: term.brightGreen
            });
        } else {
            assert (false);
        }

    }

    /**
     * @function: push
     * @access private
     * Creates and pushes a UnitModule with object and args into Application stack
     * then calls the runMethod as the stack has changed to reflect the change on
     * the terminal screen
     * @param object : {object}
     * @param delay: {number}
     * @param args: {[]}
     *
     * @return {Promise<any>}
     */
    static #push(object, delay, ...args) {
        if (ApplicationManager.#runStack.length) {
            ApplicationManager.#runStack[ApplicationManager.#runStack.length - 1]
                .changeState('Paused');
        }

        const element = new UnitModule(object, args, 'Pending', delay);
        ApplicationManager.#runStack.push(element);
        logger.info.info(`Pushed ${element} into application stack`);
        logger.debug.debug(`Current Length:${ApplicationManager.#runStack.length}`);
        ApplicationManager.#runApp();
    }


    /**
     *@function: pop
     *@access private
     *
     * If runStack is empty then exits the Process otherwise, pops
     * from top of stack and then to reflect the change in runStack
     * calls the runApp.
     * @returns {Promise<any>}
     */
    static #pop() {
        const element = ApplicationManager.#runStack.pop();
        element.object.destroy();
        logger.info.info(`Popped ${element} from stack`);
        logger.debug.debug(`Current Length:${ApplicationManager.#runStack.length}`);
        if(ApplicationManager.#runStack.length === 0) process.exit(0);
        ApplicationManager.#runApp();
    }

    /**
     * @function forward
     * @access public
     *
     * Wrapper Function to provide public level view for push
     *
     * @param object {object} object to be forwarded
     * @param delay {number} delay required to load the class
     * @param args {list} arguments for object running
     * @returns {Promise<any>}
     */
    static forward(object, delay ,...args) {
        logger.debug.debug(`forward ${delay}`);
        logger.debug.debug(`args ${args}`);
        this.#push(object, delay, ...args);
    }

    /**
     * @function back
     * @access public
     *
     * Wrapper function to provide public level view for pop
     * @returns {Promise<any>}
     */
    static back() {
        this.#pop();
    }
}

module.exports = ApplicationManager;
